data Bit is Low | High end
data Unit is Unit end


not :: Bit -> Bit
is
  \x -> case x of 
        {
          High -> Low
          ;
          Low  -> High
        }
end


flippy :: Bit -> <ReT Bit Bit I><()>
is
  \i -> bind inp <- signal (not i)
     in flippy inp
end


dev :: <ReT Bit Bit I><()>
is
     bind inp <- signal Low
  in flippy inp 
end

start :: <ReT Bit Bit I><()>
is
    dev
end
