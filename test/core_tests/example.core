data Maybe
     <a>
of
     Nothing <>
     Just <a>
end

data List
     <a>
of
     Empty <>
     Cons <a,(List a)>
end

newtype StateT
     <s m a>
of
     StateT <((Arr s) (m ((Pair a) s)))>
end

def f
     <a>
     <>
     <((Arr a) (Maybe a))>
is
     {\ x<a> -> (Just<((Arr a) (Maybe a))> x<a>)<(Maybe a)>}<((Arr a) (Maybe a))>
end

def length
     <a>
     <>
     <((Arr (List a)) Int)>
is
     {\ l<(List a)> -> case l<(List a)> of
                          <(Empty)<(List a)>                 |True<Bool>>
                             0<Int>
                          <(Cons x<a> lt<(List a)>)<(List a)>|True<Bool>>
                             ((add<((Arr Int) ((Arr Int) Int))> 1<Int>)<((Arr Int) Int)>
                                                               (length<((Arr (List a)) Int)> lt<(List a)>)<Int>
                             )<Int>
                       end<Int>
     }<((Arr (List a)) Int)>
end
