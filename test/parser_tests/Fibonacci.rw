-- File: Fibonacci.rw

--
-- The compiler doesn't yet support a "prelude" so we will have to define a
-- few things ourselves!
--
data Bit is Zero | One end
data W8 is W8 Bit Bit Bit Bit Bit Bit Bit Bit end
data Unit is Unit end

vhdl plusW8 :: W8 -> W8 -> W8 is plusW8

zeroW8 :: W8
is
  W8 Zero Zero Zero Zero Zero Zero Zero Zero
end

oneW8 :: W8
is
  W8 Zero Zero Zero Zero Zero Zero Zero One
end
--
-- End stuff that will eventually be in the prelude.
--

start :: <ReT Bit W8 I><()>
is
  begin
end

begin :: <ReT Bit W8 I><()>
is
  loop zeroW8 oneW8
end

loop :: W8 -> W8 -> <ReT Bit W8 I><()>
is
  \ n -> \ m -> bind b <- signal n
             in case b of
                { One  -> loop n m
                ; Zero -> loop m (plusW8 n m)
                }
end
